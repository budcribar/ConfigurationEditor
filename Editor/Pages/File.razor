@page "/file"
@using PeakSWC.Configuration
@using System.Text;
@using System.Runtime.Loader
@using System.IO

@inject IJSRuntime JSRuntime
@inject IComponentSerializer<IRootComponent>   Serializer
<!--

https://morioh.com/p/96f05aad50c3
    https://github.com/sample-by-jsakamoto/Blazor-DownloadFIles/blob/master/Client/wwwroot/script/helper.js
    -->
<h1>File</h1>

<button @onclick="DownloadText">Download configuration file</button>
<p>
    Upload Json:<InputFile OnChange="@OnInputFileChange" />
</p>

<p>
    Upload Assembly: <InputFile OnChange="@UploadAssembly"> Upload Assembly</InputFile>
</p>

@code {
    async Task UploadAssembly(InputFileChangeEventArgs e)
    {
        var buffer = new byte[e.File.Size];
        await e.File.OpenReadStream().ReadAsync(buffer);

        using (MemoryStream memoryStream = new MemoryStream(buffer))
        {
            var assembly = AssemblyLoadContext.Default.LoadFromStream(memoryStream);

            (Serializer as MemoryConfigurationSerializer)?.Roots.Clear();

            var instances = assembly.GetTypes().Where(p => typeof(IRootComponent).IsAssignableFrom(p)).Select(x => Activator.CreateInstance(x) as IRootComponent).Where(x => x != null).Select(x => x!);

            foreach (var instance in instances)
                (Serializer as MemoryConfigurationSerializer)?.Roots.Add(instance);
        }

    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var buffer = new byte[e.File.Size];
        await e.File.OpenReadStream().ReadAsync(buffer);

        // Reset the serialzer
        var serializer = Serializer as MemoryConfigurationSerializer;

        if (serializer != null)
        {
            serializer.data = Encoding.UTF8.GetString(buffer, 0, buffer.Length);
            serializer.Roots.Clear();
        }
    }
    async Task DownloadText()
    {
        var serializer = Serializer as MemoryConfigurationSerializer;
        string data = serializer?.data ?? "";
        //await PeakSWC.ExampleJsInterop.Prompt(JSRuntime, "Download file");
        // Generate a text file
        byte[] file = System.Text.Encoding.UTF8.GetBytes(data);

        // TODO use C# method
        await JSRuntime.InvokeVoidAsync("exampleJsFunctions.saveFile", "configuration.json", file, "text/json");
    }
}