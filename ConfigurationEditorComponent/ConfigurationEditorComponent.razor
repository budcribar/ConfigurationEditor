@namespace PeakSWC
@using PeakSWC.Configuration
@using Radzen;
@using Radzen.Blazor;
@using System.ComponentModel;

@inject DialogService dialogService

@inject PeakSWC.ConfigurationEditor.IViewModel ViewModel

<h1>Configuration Editor</h1>

@if (ViewModel.Identifiers.Count()>0)
{
    <div class="row">
        <div class="col-md-8">
            <RadzenDropDown AllowClear="true" TValue="string"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            Data="@ViewModel.Identifiers" @bind-Value="ViewModel.SelectedId" />

        </div>
        <div class="col-md-4">
            @if (ViewModel.SelectedRootComponent != null)
            {
                <button type="button" class="btn btn-info btn-md" @onclick="ViewModel.Duplicate">Duplicate</button>
                <button type="button" class="btn btn-info btn-md" @onclick="ViewModel.Remove">Delete</button>
            }

        </div>
    </div>
}

@if (ViewModel.PropertyNodes.Count() >0)

{
    <div class="row">
        <div class="col-md-8" style="margin-bottom: 16px">
            <RadzenTree Change="@OnTreeSelectionChange" Data="ViewModel.PropertyNodes" Expand="@OnTreeNodeExpand" Style="width: 100%; height: 600px">
                <RadzenTreeLevel TextProperty="Name" HasChildren="@(item => item is PropertyNode node ? node.Name == "Instances" : false)" Template="@TreeItemTemplate" Expanded="@((item) => IsNodeExpanded((PropertyNode)item))" Selected="@((item) => IsNodeSelected((PropertyNode)item))" />
            </RadzenTree>
        </div>

        <div class="col-md-4" style="margin-bottom: 16px">
            @foreach (var item in ViewModel.Errors)
            {
            <span style="color:red">@item.ErrorMessage</span>
            }

            @if (ViewModel.EditModel != null)
            {
                if (ViewModel.EditModel.Children.Count == 0)
                {
                    <RadzenCard style="overflow: auto;height:180px;">
                        
                            <span>@ViewModel.EditModel.Name</span>

                            <input @bind=@ViewModel.EditModel.StringValue />

                      
                       
                        <div class="row" style="margin-top:32px">
                            <div class="col-md-6 text-center">
                                <RadzenButton  type="button" Click="ViewModel.Save" ButtonStyle="ButtonStyle.Secondary">
                                    Save
                                </RadzenButton>
                            </div>
                            <div class="col-md-6 text-center">
                                <RadzenButton  type="button" Click="ViewModel.Cancel" ButtonStyle="ButtonStyle.Secondary" >
                                    Cancel
                                </RadzenButton>

                            </div>

                        </div>

                    </RadzenCard>
                }
                else if (ViewModel.EditModel.Name == "Instances")
                {
                    <RadzenCard style="overflow: auto;height:180px;">

                        <span>@ViewModel.EditModel.Name</span>

                        <div class="row" style="margin-top:16px">
                            <div class="col-md-6 text-center">
                                <button type="button" @onclick="Insert" class="btn btn-info btn-md">
                                    Insert
                                </button>
                               
                                
                            </div>
                            <div class="col-md-6 text-center">
                                <button type="button" @onclick="ViewModel.Remove" class="btn btn-info btn-md">
                                    Cancel
                                </button>

                            </div>

                        </div>

                    </RadzenCard>
                }
            }
        </div>

    </div>
}


@code
{
    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        StateHasChanged();
    }

    async Task Insert()
    {
        await dialogService.OpenAsync("Insert Node", ds =>
    @<RadzenCard Style="padding: 20px;">

    <RadzenDropDown AllowClear="true" TValue="Configuration.IComponent" TextProperty="Name"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                    Data="@ViewModel.Components" SelectedItemChanged="(args) => ViewModel.InsertComponent(args)" />


    <p Style="margin-bottom: 10px;">Confirm?</p>
    <div class="row">
        <div class="col-md-12">
            <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
            <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
        </div>
    </div>
</RadzenCard>);
    }

    private bool IsNodeExpanded(PropertyNode item)
    {
        return ViewModel.EditModel != null && ViewModel.EditModel is PropertyNode && item.Children.Count > 0 && item.Children.Contains(item);
    }

    private bool IsNodeSelected(PropertyNode item)
    {
        return ViewModel.EditModel != null && ViewModel.EditModel == item;
    }

    private Task OnTreeSelectionChange(TreeEventArgs args)
    {
        ViewModel.Errors = new();
        var clickedItem = (PropertyNode)args.Value;
        ViewModel.EditModel = clickedItem;
        ViewModel.PreviousValue = clickedItem.StringValue;
        return Task.CompletedTask;
    }

    private Task OnTreeNodeExpand(TreeExpandEventArgs args)
    {

        if (args.Value is PropertyNode item)
        {
            args.Children.Data = item.Children;

            args.Children.TextProperty = "Name";
            args.Children.HasChildren = (i) => i is PropertyNode node ? node.Children?.Count() > 0 : false;
            args.Children.Template = TreeItemTemplate;
        }
        return Task.CompletedTask;

    }

    RenderFragment<RadzenTreeItem>
    TreeItemTemplate = (context) => builder =>
    {
        if (context.Value is PropertyNode item)
        {
            //builder.OpenComponent<RadzenIcon>(0);
            //builder.AddAttribute(1, "Icon", item.Children?.Count() > 0 ? "folder" : "arrow forward");
            //builder.AddAttribute(2, "Style",  "position:absolute; left:0px;margin-right: 6px;" );
            //builder.CloseComponent();
            builder.AddContent(3, context.Text);
        }

    };

    Dictionary<DateTime, string> events = new();

    void Log(string eventName, string value)
    {
        events.Add(DateTime.Now, $"{eventName}: {value}");
    }

    void LogChange(TreeEventArgs args)
    {
        //Log("Change", $"Item Text: {args.Text}");
    }

    protected async override Task OnInitializedAsync()
    {
        dialogService.OnOpen += Open;
        dialogService.OnClose += ViewModel.Close;

        await ViewModel.OnInitializedAsync();

        await base.OnInitializedAsync();
        ViewModel.PropertyChanged += ViewModel_PropertyChanged;
        StateHasChanged();
    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= ViewModel_PropertyChanged;
    }

    private async void ViewModel_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() => { StateHasChanged(); });
    }
}

